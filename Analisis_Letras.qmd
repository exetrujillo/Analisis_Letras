---
title: "Análisis de Letras"
author: "Exequiel Trujillo Escobar"
date: "`r Sys.Date()`"
description: "Exploración y análisis de letras de canciones utilizando la API de LRC Lib."
format: 
  html:
    css: styles.css
    highlight-style: monokai
editor: visual
---

# Introducción

Este proyecto utiliza R para realizar análisis de letras de canciones. Se usará la database de \[LRCLIB\](<https://lrclib.net/db-dumps>).

A lo largo de todo el código se irá ejemplificando el desarrollo de una investigación sobre las letras de un conjunto de bandas. basado en algún grupo social, estilo, . El ejemplo seráel ***indie chileno*** actual, por tanto se van a ejemplificar todas las funciones dentro de este contexto. Esto incluye creación de corpus de texto, análisis de frecuencia de palabras en ciertas bandas o en conjuntos de bandas, etc.

En resumen se tiene que definir una lista de artistas para analizar múltiples bandas. Crear un corpus unificado que combine las letras de todas las bandas seleccionadas. Realizar análisis lingüísticos básicos (frecuencia de palabras, longitud promedio, etc.). Incluir ejemplos de visualizaciones para explorar patrones.

#### Tareas por hacer (ToDo):

-   Función para eliminar casos duplicados

-   Análisis:

    -   Frecuencias de palabras

    -   ¿Sentimientos? ¿Emociones?

    -   Gráficos ggplot

    -   Explorar la existencia de paquetes para estudios lingüísticos y literarios con reconocimiento de pátrones de lenguaje por gramática en español.

## Instalación de librerías

Primero, cargamos las librerías necesarias:

```{r}

library(pacman)

p_load(httr,
       jsonlite,
       dplyr,
       rvest,
       DBI,
       RSQLite,
       stringi,
       writexl
       )

rm(list = ls()) # Descomentar si necesitamos limpiar entorno
```

# Exploración de la base de datos

Aquí importamos la base de datos, sus tablas y el tipo de información que pueden contener

## Importar base de datos

```{r}

# Conectar a la base de datos
db_file <- "db.sqlite3"
conn <- dbConnect(RSQLite::SQLite(), dbname = db_file)

# Listar tablas
# tables <- dbListTables(conn)
# print(tables)
```

El resultado son las siguientes tablas:

|  |  |  |  |  |  |
|------------|------------|------------|------------|------------|------------|
| "\_litestream_lock" | "\_litestream_seq" | "flags" | "lyrics" | "missing_tracks" | "sqlite_sequence" |
| "tracks" | "tracks_fts" | "tracks_fts_config" | "tracks_fts_data" | "tracks_fts_docsize" | "tracks_fts_idx" |

## Exploramos las tablas

```{r}
# Leer los primeros registros de tracks
dataTracks <- dbGetQuery(conn, "SELECT * FROM tracks LIMIT 10")
# print(dataTracks)

# Consultar la estructura de tracks
columnsTracks <- dbGetQuery(conn, "PRAGMA table_info(tracks)")
#print(columnsTracks)

# Leer los primeros registros de lyrics
dataLyrics <- dbGetQuery(conn, "SELECT * FROM lyrics LIMIT 10")
# print(dataLyrics)

# Consultar la estructura de lyrics
columnsLyrics <- dbGetQuery(conn, "PRAGMA table_info(lyrics)")
#print(columnsLyrics)

# Oros Test (dejar comentado):
# Leer los primeros registros de una tabla
# dataX <- dbGetQuery(conn, "SELECT * FROM tracks_fts LIMIT 10")
# print(dataX)

# Consultar la estructura de la tabla
#columnsLyrics <- dbGetQuery(conn, "PRAGMA table_info(tracks_fts)")
#print(columnsX)
```

## Estructura de las tablas de interés

Nos interesa particularmente la tabla tracks y la tabla lyrics, la tabla tracks_fts parece útil para búsquedas rápidas, tiene solo el nombre, el artista y el album de las canciones con texto normalizado.

### Tracks

| Columna | Tipo | Descripción | Ejemplo |
|------------------|------------------|-------------------|------------------|
| `id` | INT | Clave primaria de la tabla. Usada para identificar de manera única cada canción o pista. | 3 |
| `name` | TEXT | Nombre de la canción o pista. Es sensible a mayúsculas y minúsculas. | Wildest Dreams |
| `name_lower` | TEXT | Versión en minúsculas del nombre de la pista (`name`). | wildest dreams |
| `artist_name` | TEXT | Nombre del artista que interpreta la canción. Sensible a mayúsculas y minúsculas. | ZAYN feat. Sia |
| `artist_name_lower` | TEXT | Versión en minúsculas del nombre del artista (`artist_name`). | zayn feat sia |
| `album_name` | TEXT | Nombre del álbum en el que se encuentra la canción. | Dusk Till Dawn (Radio Edit) |
| `album_name_lower` | TEXT | Versión en minúsculas del nombre del álbum (`album_name`). | dusk till dawn radio edit |
| `duration` | FLOAT | Duración de la canción en segundos. | 239 |
| `last_lyrics_id` | INT | Referencia a otra tabla (como `lyrics`) que almacena las letras de las canciones. Algunas no coinciden con `id` necesariamente. | 3 |
| `created_at` | DATE | Representa la fecha y la hora en que se creó el registro. | 2022-11-14 11:46:45.978+00:00 |
| `updated_at` | DATE | Indica la fecha (y hora) en que se actualizó por última vez el registro. | 2022-11-14 11:46:45.978+00:00 |

### Lyrics

| Columna | Tipo | Descripción | Ejemplo |
|------------------|------------------|-------------------|------------------|
| `id` | INT | Clave primaria de la tabla, única para cada registro de letras. | 3 |
| `plain_lyrics` | TEXT | Letras de la canción en formato simple (sin sincronización con la música). | Not tryna be indie\\nNot tryna be cool\\nJust tryna be in this\\nTell me, are you too?\\n\\nCan \[...\] |
| `synced_lyrics` | TEXT | Letras sincronizadas, con marcas de tiempo para seguir la canción mientras se reproduce. | \[00:09.66\] Not tryna be indie\\n\[00:12.30\] Not tryna be cool\\n\[00:14.99\] Just tryna be in \[...\] |
| `track_id` | INT | Clave foránea que referencia la columna `id` en la tabla `tracks`. Esto vincula las letras con las canciones. | 3 |
| `has_plain_lyrics` | BOOLEAN | Indica si hay letras simples disponibles (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 1 |
| `has_synced_lyrics` | BOOLEAN | Indica si hay letras sincronizadas disponibles (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 1 |
| `instrumental` | BOOLEAN | Indica si la pista es instrumental y, por lo tanto, no tiene letras. (\[`TRUE` = 1\] o \[`FALSE` = 0\]). | 0 |
| `source` | TEXT | Fuente de las letras (La mayoría está en NA). | NA |
| `created_at` | DATE | Fecha y hora de creación del registro. | 2022-11-14 11:46:45.978+00:00 |
| `updated_at` | DATE | Fecha y hora de la última actualización del registro. | 2022-11-14 11:46:45.978+00:00 |

# Definición de funciones de extracción

Ya teniendo claridad de la estructura de las tablas que nos interesan, comenzaremos a crear las funciones que nos permitan crear nuestros propios data frames extrayendo las columnas que nos interesan.

## El ejemplo

Partiremos con una sola banda

## Variables iniciales de ejemplo

```{r}

artista_ej <- "Niños del Cerro"
```

## Normalizar nombre de artista

Normalizar los nombres de los artistas es estandarizar su "formato" para que sean uniformes, independientemente de cómo estén registrados en la base de datos o ingresados por el usuario. Esto es útil para evitar problemas como registros duplicados o consultas fallidas debido a diferencias en mayúsculas, espacios, acentos, o caracteres especiales, como la ñ en "Niños del Cerro".

```{r}

# Función de normalización sin eliminar el punto
nrmlztxt <- function(texto) {
  texto <- tolower(texto)                          # Minúsculas
  texto <- trimws(texto)                           # Eliminar espacios
  texto <- gsub("\\s+", " ", texto)                # Reemplazar múltiples espacios por uno solo
  texto <- stri_trans_general(texto, "Latin-ASCII") # Eliminar acentos
  texto <- gsub("[^a-z0-9 .]", "", texto)           # Permitir puntos (.) en los nombres
  return(texto)
}

# Lo probamos, pero esta función al parecer es innecesaria
artista_ej_nrm <- nrmlztxt(artista_ej)
print(artista_ej_nrm)
```

Se ve que el resultado es "ninos del cerro", sin espacios, ni ñ, ni mayúsculas.

## Obtener canciones de un artista con las letras

```{r}

buscarPorArtista <- function(nombre_artista, conexion) {
  # Normalizar el nombre del artista
  nombre_artista <- tolower(nombre_artista)                       # Convertir a minúsculas
  nombre_artista <- stri_trans_general(nombre_artista, "Latin-ASCII") # Eliminar acentos y caracteres especiales
  nombre_artista <- trimws(nombre_artista)                         # Eliminar espacios adicionales
  
  # Proteger el nombre para consultas SQL
  nombre_artista_quoted <- dbQuoteString(conexion, nombre_artista)
  
  # Consulta SQL con LIKE (búsqueda flexible) y campo normalizado en la base de datos
  query <- paste0("
    SELECT 
      t.id AS track_id, t.name, t.name_lower, t.artist_name, t.artist_name_lower, 
      t.album_name, t.album_name_lower, t.duration, t.updated_at, 
      l.id AS lyrics_id, l.plain_lyrics, l.synced_lyrics, l.has_plain_lyrics, 
      l.has_synced_lyrics, l.instrumental
    FROM tracks t
    LEFT JOIN lyrics l ON t.last_lyrics_id = l.id
    WHERE t.artist_name_lower LIKE ", nombre_artista_quoted
  )
  
  # Ejecutar la consulta
  data <- dbGetQuery(conexion, query)
  
  return(data)
}

# Ejemplo de uso de la función con nombre sin normalizar
df_artista_ej <- buscarPorArtista(artista_ej, conn)

# Mostrar las primeras filas del dataframe final
# head(df_artista_ej)
```

Arroja 47 filas con 15 variables: **track_id** (\<int\>), **name** (\<chr\>), **name_lower** (\<chr\>), **artist_name** (\<chr\>), **artist_name_lower** (\<chr\>), **album_name** (\<chr\>), **album_name_lower** (\<chr\>), **duration** (\<dbl\>), **updated_at** (\<chr\>), **lyrics_id** (\<int\>), **plain_lyrics** (\<chr\>), **synced_lyrics** (\<chr\>), **has_plain_lyrics** (\<int\>), **has_synced_lyrics** (\<int\>) e **instrumental** (\<int\>).

## Limpieza de duplicados

Supongamos que tenemos un pequeño subconjunto de datos:

| name_lower | artist_name_lower | has_synced_lyrics | updated_at | has_plain_lyrics |
|---------------|---------------|---------------|---------------|---------------|
| doce | asia menor | 0 | 2023-01-01 12:00:00 | 1 |
| doce | asia menor | 1 | 2023-01-02 12:00:00 | 1 |
| doce | asia menor | 1 | 2022-12-31 12:00:00 | 1 |

```{r}

limpiarDuplicadosU <- function(data) {
  # Paso 1: Ordenar para establecer prioridades
  data <- data %>%
    arrange(
      name_lower,
      desc(has_synced_lyrics),  # Priorizar sincronizadas
      desc(has_plain_lyrics)    # Si no sincronizadas, preferir letras planas
    )
  
  # Paso 2: Detectar canciones duplicadas
  data_unicos <- data %>%
    group_by(name_lower) %>%
    filter(
      # Mantener la primera versión en orden de prioridad
      row_number() == 1
    ) %>%
    ungroup()
  
  # Paso 3: Marcar versiones diferentes del mismo nombre
  data_unicos <- data_unicos %>%
    mutate(
      es_version_diferente = ifelse(
        duplicated(name_lower) & !duplicated(album_name_lower),
        TRUE,
        FALSE
      )
    )
  
  return(data_unicos)
}

# Ejemplo
df_artista_ej <- limpiarDuplicadosU(df_artista_ej)
```

Funciona pero deja sin tratar algunos casos, como los (en vivo) o los que tienen ft. o feat.

# El indie chileno

Ciertamente una banda no constituye un estilo artístico por completo. El indie de por sí es una categoría bastante amplia que refiere a artistas (solistas o bandas) que en general se encuentran por fuera del espacio de grandes discográficas y de estructuras comerciales importantes. Viene más de una producción independiente del arte, relativamente independiente al capital comparando con la música más comercial.

Lo amplio del indie también refiere a la diversidad de estilos que se entremezclan, desde el rock, el pop, el folk, música más electrónica, elementos de rap, etc. Con un sello bastante experimental en muchos casos, sonidos más difusos, cierto grado de sensación de letargo en algunas sonoridades extendidas en la escena.

### Definición de grupos artísticos

```{r}

bandas_indie <- c(
  "Adelaida",
  "Amarga Marga",
  "Anttonias",
  "Árbol Lunar",
  "Asia menor",
  "Asamblea Internacional del Fuego", #Poshardcore
  "Cabro",
  "Candelabro",
  "Chini and the technicians",
  "Chini png",
  "Columpios al Suelo",
  "Confío en tus amigos",
  "Cristóbal Gacitúa",
  "Cuando el problema no existe",
  "Cepa Funk",
  "Daniela Gatica y el fruto del ruido",
  "De Perder sus Pétalos",
  "Déjenme Dormir",
  "Dolorio & los Tunantes",
  "El cómodo silencio de los que hablan poco",
  "Etéreos",
  "Fin del Mundo",
  "Flores",
  "Floresalegría",
  "Frucola Frappé",
  "Gangrena Surf",
  "Helices",
  "Hemisferio Sur",
  "Hesse Kassel",
  "iiii", # Sí, es el nombre de la banda
  "Las Olas (NoisPop)",
  "Lejania",
  "Los animales también se suicidan",
  "Los repuestos superpuestos",
  "Los Santos Dumont",
  "Los Valentina",
  "Mark 62", # Pop punk
  "María Tyrana",
  "MonoAzul",
  "Niños del Cerro",
  "Novio",
  "Palacio Verde",
  "Paracaidistas",
  "Parálisis del Sueño",
  "Patio Solar",
  "Phuyu y la Fantasma",
  "Perrogato",
  "Protistas",
  "Rock N' Chile",
  "Rosario Alfonso",
  "Samsara",
  "Siniestra Pandora",
  "Silabario",
  "Super Especial",
  "Supertriste",
  "Teoría de Maicol", # Pop alternativo
  "Tus amigos nuevos",
  "Violentistas de Siempre",
  "99 Payasos" # Pop punk
)
```

## Crear corpus

```{r}

crearCorpusDeBandas <- function(lista_bandas, conexion) {
  # Inicializar un dataframe vacío con las columnas necesarias
  corpus_data <- data.frame(
    track_id = integer(),
    name = character(),
    name_lower = character(),
    artist_name = character(),
    artist_name_lower = character(),
    album_name = character(),
    album_name_lower = character(),
    duration = double(),
    updated_at = character(),
    lyrics_id = integer(),
    plain_lyrics = character(),
    synced_lyrics = character(),
    has_plain_lyrics = integer(),
    has_synced_lyrics = integer(),
    instrumental = integer(),
    stringsAsFactors = FALSE
  )
  
  # Recorrer la lista de bandas
  for (artista in lista_bandas) {
    # Llamar a la función buscarPorArtista para obtener las canciones de cada banda
    df_artista <- buscarPorArtista(artista, conexion)
    
    # Si no se encontraron canciones, continuar con el siguiente artista
    if (is.null(df_artista)) {
      cat("No se encontraron canciones para el artista:", artista, "\n")
      next
    }
    
    # Convertir updated_at a texto
    df_artista <- df_artista %>%
      mutate(updated_at = as.character(updated_at))
    
    # Limpiar duplicados
    df_artista <- limpiarDuplicadosU(df_artista)
    
    # Añadir las canciones al corpus
    corpus_data <- bind_rows(corpus_data, df_artista %>%
                               select(
                                 track_id, 
                                 name, 
                                 name_lower, 
                                 artist_name, 
                                 artist_name_lower, 
                                 album_name, 
                                 album_name_lower, 
                                 duration, 
                                 updated_at, 
                                 lyrics_id, 
                                 plain_lyrics, 
                                 synced_lyrics, 
                                 has_plain_lyrics, 
                                 has_synced_lyrics, 
                                 instrumental
                               ))
  }
  
  # Devolver el dataframe con todas las letras de las canciones y las columnas necesarias
  return(corpus_data)
}

# Crear el corpus con todas las bandas
corpus_df <- crearCorpusDeBandas(bandas_indie, conn)

# Mostrar las primeras filas del dataframe resultante
#head(corpus_df)
```

# Exportación de data frames

### En excel

```{r}

exportar_excel <- function(dataframe, file_path) {
  # Verificar que el dataframe no esté vacío
  if (nrow(dataframe) == 0) {
    stop("El dataframe está vacío y no se puede exportar.")
  }
  
  # Verificar que el paquete writexl esté instalado
  if (!requireNamespace("writexl", quietly = TRUE)) {
    stop("El paquete 'writexl' no está instalado. Usa install.packages('writexl') para instalarlo.")
  }
  
  # Exportar el dataframe como archivo Excel
  writexl::write_xlsx(dataframe, file_path)
  
  # Mensaje de confirmación
  message("El archivo Excel se ha guardado correctamente en: ", file_path)
}

# Ejemplo de uso:
# exportar_excel(corpus_df, "corpus_bandas.xlsx")
```

### En texto

```{r}
exportar_texto <- function(data, nombre_archivo, separador = "\t", incluir_nombres_filas = FALSE, entrecomillar = FALSE) {
  # Validar que data sea un data.frame
  if (!is.data.frame(data)) {
    stop("El objeto proporcionado no es un data.frame.")
  }
  
  # Exportar el data.frame a un archivo de texto
  write.table(
    data,
    file = nombre_archivo,
    sep = separador,
    row.names = incluir_nombres_filas,
    quote = entrecomillar
  )
  
  # Mensaje de confirmación
  cat("Archivo exportado exitosamente en:", nombre_archivo, "\n")
}

# Llamar a la función para exportar tu data.frame
exportar_texto(
  data = corpus_df,               # DataFrame a exportar
  nombre_archivo = "corpus_df_to_text.txt", # Nombre del archivo
  separador = "\t",                  # Separador de columnas (tabulación)
  incluir_nombres_filas = TRUE,     # No incluir índices de las filas
  entrecomillar = FALSE              # No entrecomillar valores
)
```
